/*
 * Copyright (c) 2009 and 2010 Frank G. Bennett, Jr. All Rights Reserved.
 *
 * The contents of this file are subject to the Common Public
 * Attribution License Version 1.0 (the “License”); you may not use
 * this file except in compliance with the License. You may obtain a
 * copy of the License at:
 *
 * http://bitbucket.org/fbennett/citeproc-js/src/tip/LICENSE.
 *
 * The License is based on the Mozilla Public License Version 1.1 but
 * Sections 14 and 15 have been added to cover use of software over a
 * computer network and provide for limited attribution for the
 * Original Developer. In addition, Exhibit A has been modified to be
 * consistent with Exhibit B.
 *
 * Software distributed under the License is distributed on an “AS IS”
 * basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See
 * the License for the specific language governing rights and limitations
 * under the License.
 *
 * The Original Code is the citation formatting software known as
 * "citeproc-js" (an implementation of the Citation Style Language
 * [CSL]), including the original test fixtures and software located
 * under the ./std subdirectory of the distribution archive.
 *
 * The Original Developer is not the Initial Developer and is
 * __________. If left blank, the Original Developer is the Initial
 * Developer.
 *
 * The Initial Developer of the Original Code is Frank G. Bennett,
 * Jr. All portions of the code written by Frank G. Bennett, Jr. are
 * Copyright (c) 2009 and 2010 Frank G. Bennett, Jr. All Rights Reserved.
 */
For integration, there will be two problems (at least).

(1) Sorting of citations.  The processor does not maintain state for
citations, and depends on the integration layer for position hints. It
currently performs sorting of citations immediately before rendering,
but this will break any positioning logic done in the integration
layer, which obviously needs to be done before cites are rendered.

Probably the simplest for Simon would be to separate sorting from
rendering, and have the integration layer call the processor first
with one interface (when updating the integration state entries), and
again with the other (when rendering citations).  This is close to
what the integration layer seems to do now (I guess that the sort
method on the citation objects in integration.js is in some way
delegated from the CSL processor).

(2) Parallel cites.  To get ibid working correctly with parallel
cites, the rendering method of the processor needs to be passed a
citation object from the integration layer, and modify the cite entry
for each cite processed to add a "parallel" flag on the second and
subsequent cites in any parallel series.  The positioning code in the
integration layer then needs to use this flag to set a "subsequent"
position on such cites, and otherwise skip over them for position
evaluation purposes.
