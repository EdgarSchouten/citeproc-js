/**
 * A Javascript implementation of the CSL citation formatting language.
 *
 * <p>A configured instance of the process is built in two stages,
 * using {@link CSL.Core.Build} and {@link CSL.Core.Configure}.
 * The former sets up hash-accessible locale data and imports the CSL format file
 * to be applied to the citations,
 * transforming it into a one-dimensional token list, and
 * registering functions and parameters on each token as appropriate.
 * The latter sets jump-point information
 * on tokens that constitute potential branch
 * points, in a single back-to-front scan of the token list.
 * This
 * yields a token list that can be executed front-to-back by
 * body methods available on the
 * {@link CSL.Engine} class.</p>
 *
 * <p>This top-level {@link CSL} object itself carries
 * constants that are needed during processing.</p>
 * @namespace A CSL citation formatter.
 */
==============================
Structure of a Zotero citation
==============================

citation = {
  "sort" : function(){},    // To reside in the processor.
  "clone" : function(){},
  "properties" : {
    "field" : {},           // The citation data, in serialized JSON or as a string.
    "index" : 0,            // Position of citation in array, I guess.
    "noteIndex" : 0,        // Note number
    "sort" : false,
    "delete" : false,
    "custom" : false        // Using the style editor on one cite taints whole citation.
  },
  "citationItems" : [
    {
      "itemID" : "",
      "key" : "",           // To change; citeproc-js keys are in an array.
      "item" : "",          // ??? Same as itemID maybe?
      "locator" : "",
      "locatorType" : "",
      "position": "",
      "suppressAuthor" : "",
      "prefix" : "",
      "suffix" : ""
    }
  ]
}
