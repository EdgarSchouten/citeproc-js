citeproc-js: Yet Another CSL Processor

Frank Bennett
Graduate School of Law, Nagoya University
2009.04.18
=========================================

This is an effort to implement a fast and robust CSL processor in
Javascript, for use by the Zotero project.


----------------
The architecture
----------------

The following link has (dated but to be maintained) JsDoc documentation 
that provides some guidance re how things fit together:

  http://gsl-nagoya-u.net/http/pub/citeproc-js-doc/index.html

In rough outline, there is a two-stage compiler (Build and Configure)
that can be used to construct an object with a few methods useful for
loading CSL styles, and using them to render citations and bibliographies.

The object has several sub-objects.  The most important are "registry",
"citation", "bibliography", "citation_sort" and "bibliography_sort".
The latter four hold option containers and token lists for particular 
renderings defined in a CSL style.  The top-level methods on the main 
object apply execution wrappers to the token lists to produce output
strings.  The "registry" object provides a persistent store for
managing the bibliography sort order, disambiguation, and
back-references.

Output is generated by passing data items to a wrapper function that
scans the appropriate token lists and renders strings based on the
functions registered in the tokens.  The output queue is built as
a nested hierarchy which is then collapsed into a formatted string
for output.


--------------------
Testing, testing ...
--------------------

As you can see from the sources, tests are kind of important here.
Javascript is notoriously unfriendly when it comes to debugging,
the processor is charged with and extremely complex formatting
task, and the target community is unforgiving.  Things have to
work correctly, and the only way to assure that they do is to
test the code thoroughly as it is written.

Test suites are useful to us in all sorts of ways.  Standard tests
(housed under ./std) help to assure that the various CSL
implementations produce identical results.  The internal tests
specific to citeproc-js provide insurance against unexpected
side-effects in the event of wholesale refactoring (of which
there has been more than I would like to remember).  Tests 
are not just about QA; they improve the clarity of program operation, 
and reduce the resistance to rewrites that may be needed to reduce 
overall complexity.  The suites are an integral part of the
development process; if you modify or add code to the processor
(and contributions are welcome!), be sure to complement your changes
with tests.  It's the right thing to do.


--------------
Archive layout
--------------

The sources of the program are under ./src.  The ./locale and ./style
directories contain standard files from the CSL distribution, for 
use in testing.  The tests are located under ./tests (for those
specific to citeproc-js) and ./std (for the standard CSL test
fixtures).

The basic testing framework we use is DOH, from the Dojo project,
run via the Rhino JS interpreter that runs atop Java.  If your
machine has Java installed, the ./dojo and ./rhino directories
provide the remaining infrastructure needed to run the tests; they
should work out of the box (see below).

The ./data directory contains input files for running tests.  Over
time, this material will be moved into the standard test suite
area, and the directory will go away.  The ./ref directory
contains a grab-bag of documents and files stashed or shoved aside
during development.


-------------
Running tests
-------------

After checkout or update, be sure to run the script ./std/grind.sh.
This will generate the machine-readable version of the standard
test cases, required by the test runner.

The script that runs all the tests is ./runtests.sh in the top-level
directory.  Rintze Zelle has very kindly provided a ./runtests.bat file
as well, and the tests reportedly run (and we hope also break) equally 
well on Windows boxes.

If you have a Java interpreter installed and are on Linux (or possibly
a Mac), you can run the tests in a checkout from a terminal by
entering the top directory and just typing ./runtests.sh. 

On Windows, the ./runtests.bat file can be run from the command prompt, 
the only caveat being that the command prompt should be set to the drive 
harboring the SVN working copy, e.g. "D:\>D:\xbiblio\citeproc-js\
trunk\runtests.bat" works whereas "C:\>D:\xbiblio\citeproc-js\
trunk\runtests.bat" gives an error when executed.


-------------------
Running the program
-------------------

While development is mainly aimed at supporting Zotero, the processor
contains no Zotero dependencies, and should work as a standalone
formatting engine.  A sample is contained in the ./rpc-stuff directory.


----------
Other info
----------

Information on writing tests using the DOH framework can be found here:

  http://www.ibm.com/developerworks/web/library/wa-aj-doh/index.html

The DOH testing framework is part of the Dojo project.  The dojo
framework files under ./dojo are from a release instance of the
product compiled from the original source.  (Compiling from scratch
was necessary in order to run DOH from the command line as we do
here.) If you want to use DOH for your own projects, the sources for
Dojo are available here:

  http://download.dojotoolkit.org/

I had a small problem with timeouts on my (slow) machine, which
required commenting out one line of the DOH code.  That change is
incorporated in the configured instance of DOH included in these
sources.

Enjoy!
